---

- name: download node installer
  get_url:
    url: https://deb.nodesource.com/setup_18.x
    dest: /usr/local/src/nodejs_18_setup
  register: node_download

- name: configure nodejs repository
  shell: /usr/bin/bash /usr/local/src/nodejs_18_setup; apt update
  when: node_download.changed

- name: install nodejs and other packages #npm
  package:
    name: net-tools, joe, python3-venv, maven, docker.io, docker-compose, openjdk-17-jre-headless, nodejs, npm
  register: packages

- name: Reboot the server if fresh install -- this is only needed because of docker
  shell: "sleep 5 && reboot"
  async: 1
  poll: 0
  register: reboot
  tags: reboot
  when: packages.changed

- name: Wait for the reboot and reconnect 
  wait_for:
    port: 22
    host: '{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}'
    search_regex: OpenSSH
    delay: 10
  timeout: 300
  connection: local

- name: npm install -g @angular/cli
  community.general.npm:
    name: '@angular/cli'
    global: true

- name: create cedar dir
  file:
    dest: '{{ cedar_home }}'
    state: directory

- name: clone cedar-cli repo
  git:
    repo: https://github.com/dsd-sztaki-hu/cedar-cli.git
    version: '{{ cedar.version }}'
    dest: '{{ cedar_home }}/cedar-cli'
  tags: git

- name: create python virtual environment
  shell:
    chdir: '{{ cedar_home }}/cedar-cli'
    cmd: python3 -m venv ./.venv
    creates: '{{ cedar_home }}/cedar-cli/.venv'
  tags: venv

- name: install python requirements
  pip:
    requirements: '{{ cedar_home }}/cedar-cli/requirements.txt'
    virtualenv: '{{ cedar_home }}/cedar-cli/.venv'
  tags: requirements

- name: install bash aliases file
  template:
    src: aliases.j2
    dest: '{{ cedar_home }}/aliases'
  tags: aliases

- name: source aliases in /root/.bashrc
  lineinfile:
    path: /root/.bashrc
    regex: '^\. {{ cedar_home }}/aliases'
    line: '. {{ cedar_home }}/aliases'
  tags: aliases

- name: generate hosts file part
  template:
    src: hosts_part.j2
    dest: /tmp/cedar_hosts_part
  tags: hosts

- name: read remote hosts file part
  register: hosts_file_part
  shell: cat /tmp/cedar_hosts_part
  tags: hosts

- name: merge hosts file part
  blockinfile:
    block: "{{ hosts_file_part.stdout }}"
    marker: "# CEDAR ANSIBLE ENTRIES {mark}"
    path: /etc/hosts
  tags: hosts

- name: clone all cedar gits
  shell:
    chdir: '{{ cedar_home }}/cedar-cli'
    cmd: source .venv/bin/activate ; python3 cedar.py git clone all
  tags: cedargits, git
  notify: enable and restart cedar

- name: clone more with cedarcli
  shell:
    chdir: '{{ cedar_home }}/cedar-cli'
    cmd: bash -i -c "cedarcli git clone all"
  tags: cedargits, git
  notify: enable and restart cedar

- name: pull with cedarcli to refresh gits
  shell:
    chdir: '{{ cedar_home }}/cedar-cli'
    cmd: bash -i -c "cedarcli git pull"
  tags: cedargits, git
  notify: enable and restart cedar

# Don't do this now, we expect that our main version matches the version we want to install. May reveisit later.
- name: clone requested version with cedarcli
  shell:
    chdir: '{{ cedar_home }}/cedar-cli'
    cmd: bash -i -c "cedarcli git checkout {{ cedar.version }}"
  when: cedar.version is defined
  tags: cedargits, git

- name: change docker build remote and checkout different version
  shell:
    chdir: '{{ cedar_home }}/cedar-docker-build'
    cmd: bash -i -c "git remote | grep -q "{{ cedar.docker_build.remote.name }}" ||
         git remote add {{ cedar.docker_build.remote.name }} {{ cedar.docker_build.remote.url }} && 
         git fetch {{ cedar.docker_build.remote.name }} && 
         git checkout {{ cedar.docker_build.remote.version }}"
  when: cedar.docker_build.remote is defined
  tags: dockerremote, docker, git
  notify: enable and restart cedar

- name: change docker deploy remote and checkout different version
  shell:
    chdir: '{{ cedar_home }}/cedar-docker-deploy'
    cmd: bash -i -c "git remote | grep -q "{{ cedar.docker_deploy.remote.name }}" || 
         git remote add {{ cedar.docker_deploy.remote.name }} {{ cedar.docker_deploy.remote.url }} && 
         git fetch {{ cedar.docker_deploy.remote.name }} && 
         git checkout {{ cedar.docker_deploy.remote.version }}"
  when: cedar.docker_deploy.remote is defined
  tags: dockerremote, docker, git
  notify: enable and restart cedar

- name: Check if ca.crt exists
  stat:
    path: /usr/local/src/CEDAR/CEDAR_CA/ca.crt
  register: ca_cert
  tags: certs

- name: cedarcli cert setup
  shell:
    chdir: '{{ cedar_home }}/cedar-cli'
    cmd: bash -i -c "cedarcli cert setup &&
                     cedarcli cert ca &&
                     cedarcli cert domains"
  when: cedar.ca.enabled and not ca_cert.stat.exists
  notify: enable and restart cedar-infrastructure
  tags: certs
  notify: enable and restart cedar

- name: cedarcli docker one-time-setup
  shell:
    chdir: '{{ cedar_home }}/cedar-cli'
    cmd: bash -i -c "cedarcli docker one-time-setup"
  tags: docker

- name: Copying self-signed certificates into the cedar_cert volume...
  shell:
    chdir: '{{ cedar_home }}/cedar-cli'
    cmd: bash -i -c '
             docker run -v cedar_cert:/data --name cedar-cert-helper busybox:1.36.0 true &&
             docker cp ${CEDAR_HOME}/CEDAR_CA/certs cedar-cert-helper:/data &&
             docker run -v cedar_cert:/data --name cedar-cert-helper2 busybox:1.36.0 /bin/sh -c "rm -rf /data/live ; mv /data/certs /data/live" &&
             docker rm cedar-cert-helper cedar-cert-helper2'
  tags: docker, certs
  notify: enable and restart cedar

- name: Copying CA certificate into the cedar_ca volume...
  shell:
    chdir: '{{ cedar_home }}/cedar-cli'
    cmd: bash -i -c '
             docker run -v cedar_ca:/data --name cedar-ca-helper busybox:1.36.0 true &&
             docker cp ${CEDAR_HOME}/CEDAR_CA/ca.crt cedar-ca-helper:/data &&
             docker rm cedar-ca-helper'
  tags: docker, certs
  notify: enable and restart cedar

# This may not be necessary ...
- name: cedarcli build all
  shell:
    chdir: '{{ cedar_home }}/cedar-cli'
    cmd: bash -i -c "cedarcli build all"
  tags: build


- name: install cedar systemd service files
  template:
    src: '{{ item }}.service.j2'
    dest: /etc/systemd/system/{{ item }}.service
    owner: root
    group: root
  with_items:
    - cedar-infrastructure
    - cedar-microservices
    - cedar-frontend
  notify: enable and restart {{ item }}
  tags: systemd, services

- meta: flush_handlers

- ansible.builtin.import_tasks: arp_utils.yml
  when: cedar.arp_utils_repo is defined
  tags: arp_utils, arp, arp-utils

- name: update cedar GUI
  shell:
    chdir: '{{ cedar_home }}/cedar-cli'
    cmd: bash -i -c '
             service cedar-frontend stop &&
             service cedar-infrastructure stop &&
             docker image rm metadatacenter/cedar-frontend-main:2.6.41 &&
             docker image rm metadatacenter/cedar-infra-keycloak:2.6.41 &&
             service cedar-infrastructure start &&
             service cedar-frontend start'
  tags: never, gui
